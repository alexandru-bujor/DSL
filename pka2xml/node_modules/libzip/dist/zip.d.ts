/// <reference types="node" />
import { UINT32, UINT16 } from './data-type';
import { Flag, COMP_TYPE } from './util';
import StreamBuffer from './stream-buf';
export declare class LocalFileHeader {
    private readonly SIGNATURE;
    signature: UINT32;
    version: UINT16;
    flags: Flag;
    compression: COMP_TYPE;
    modTime: UINT16;
    modDate: UINT16;
    crc32: UINT32;
    compressedSize: UINT32;
    uncompressedSize: UINT32;
    filenameLen: UINT16;
    extraFieldLen: UINT16;
    filename: string;
    extraField: Buffer;
    data: Buffer;
    constructor(stream?: StreamBuffer);
    get Date(): Date;
    set Date(date: Date);
    set Filename(name: string);
}
export declare class CentralDirectory {
    private readonly SIGNATURE;
    signature: UINT32;
    version: UINT16;
    extVer: UINT16;
    flags: Flag;
    compression: COMP_TYPE;
    modTime: UINT16;
    modDate: UINT16;
    crc32: UINT32;
    compressedSize: UINT32;
    uncompressedSize: UINT32;
    filenameLen: UINT16;
    extraFieldLen: UINT16;
    commentLen: UINT16;
    diskNumStart: UINT16;
    inAttr: UINT16;
    exAttr: UINT32;
    headerOffset: UINT32;
    filename: string;
    extraField: Buffer;
    comment: string;
    constructor(stream?: StreamBuffer);
    get Date(): Date;
    set Date(date: Date);
    set Filename(name: string);
}
export declare class EndOfCentralDirectory {
    private readonly SIGNATURE;
    signature: UINT32;
    diskNum: UINT16;
    diskStart: UINT16;
    recordNum: UINT16;
    totalNum: UINT16;
    recordSize: UINT32;
    recordStart: UINT32;
    commentLen: UINT16;
    comment: string;
    static isEOCD(stream: StreamBuffer): boolean;
    constructor(stream?: StreamBuffer);
}
//# sourceMappingURL=zip.d.ts.map