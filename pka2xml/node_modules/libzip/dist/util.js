"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateToTime = exports.DateToDay = exports.TimeToDate = exports.DayToDate = exports.FlagToInt16 = exports.parseFlag = exports.FLAG = exports.CD_VER = exports.COMP_TYPE = void 0;
var COMP_TYPE;
(function (COMP_TYPE) {
    COMP_TYPE[COMP_TYPE["NO_COMPRESSION"] = 0] = "NO_COMPRESSION";
    COMP_TYPE[COMP_TYPE["SHRUNK"] = 1] = "SHRUNK";
    COMP_TYPE[COMP_TYPE["FACTOR_1"] = 2] = "FACTOR_1";
    COMP_TYPE[COMP_TYPE["FACTOR_2"] = 3] = "FACTOR_2";
    COMP_TYPE[COMP_TYPE["FACTOR_3"] = 4] = "FACTOR_3";
    COMP_TYPE[COMP_TYPE["FACTOR_4"] = 5] = "FACTOR_4";
    COMP_TYPE[COMP_TYPE["IMPLODED"] = 6] = "IMPLODED";
    COMP_TYPE[COMP_TYPE["RESERVED_1"] = 7] = "RESERVED_1";
    COMP_TYPE[COMP_TYPE["DEFLATED"] = 8] = "DEFLATED";
    COMP_TYPE[COMP_TYPE["ENHANCED_DEFLATED"] = 9] = "ENHANCED_DEFLATED";
    COMP_TYPE[COMP_TYPE["DCL_IMPLODED"] = 16] = "DCL_IMPLODED";
    COMP_TYPE[COMP_TYPE["RESERVED_2"] = 17] = "RESERVED_2";
    COMP_TYPE[COMP_TYPE["BZIP2"] = 18] = "BZIP2";
    COMP_TYPE[COMP_TYPE["RESERVED_3"] = 19] = "RESERVED_3";
    COMP_TYPE[COMP_TYPE["LZMA"] = 20] = "LZMA";
    COMP_TYPE[COMP_TYPE["RESERVED_4"] = 21] = "RESERVED_4";
    COMP_TYPE[COMP_TYPE["RESERVED_5"] = 22] = "RESERVED_5";
    COMP_TYPE[COMP_TYPE["RESERVED_6"] = 23] = "RESERVED_6";
    COMP_TYPE[COMP_TYPE["IBM_TERSE"] = 24] = "IBM_TERSE";
    COMP_TYPE[COMP_TYPE["IBM_LZ77"] = 25] = "IBM_LZ77";
    COMP_TYPE[COMP_TYPE["PPMD_1"] = 152] = "PPMD_1";
})(COMP_TYPE = exports.COMP_TYPE || (exports.COMP_TYPE = {}));
var CD_VER;
(function (CD_VER) {
    CD_VER[CD_VER["MSDOS"] = 0] = "MSDOS";
    CD_VER[CD_VER["AMIGA"] = 1] = "AMIGA";
    CD_VER[CD_VER["OPEN_VMS"] = 2] = "OPEN_VMS";
    CD_VER[CD_VER["UNIX"] = 3] = "UNIX";
    CD_VER[CD_VER["VM_CMS"] = 4] = "VM_CMS";
    CD_VER[CD_VER["ATARI_ST"] = 5] = "ATARI_ST";
    CD_VER[CD_VER["HPFS"] = 6] = "HPFS";
    CD_VER[CD_VER["MACHINTOSH"] = 7] = "MACHINTOSH";
    CD_VER[CD_VER["ZSYSTEM"] = 8] = "ZSYSTEM";
    CD_VER[CD_VER["CPM"] = 9] = "CPM";
    CD_VER[CD_VER["NTFS"] = 16] = "NTFS";
    CD_VER[CD_VER["MVS"] = 17] = "MVS";
    CD_VER[CD_VER["VSE"] = 18] = "VSE";
    CD_VER[CD_VER["ACORN"] = 19] = "ACORN";
    CD_VER[CD_VER["VFAT"] = 20] = "VFAT";
    CD_VER[CD_VER["ALTERNATE_MVS"] = 21] = "ALTERNATE_MVS";
    CD_VER[CD_VER["BEOS"] = 22] = "BEOS";
    CD_VER[CD_VER["TANDEM"] = 23] = "TANDEM";
    CD_VER[CD_VER["OS400"] = 24] = "OS400";
    CD_VER[CD_VER["OSX_DARWIN"] = 25] = "OSX_DARWIN";
})(CD_VER = exports.CD_VER || (exports.CD_VER = {}));
var FLAG;
(function (FLAG) {
    FLAG[FLAG["ENCRYPTED_FILE"] = 1] = "ENCRYPTED_FILE";
    FLAG[FLAG["COMPRESSION_OPTION_1"] = 2] = "COMPRESSION_OPTION_1";
    FLAG[FLAG["COMPRESSION_OPTION_2"] = 4] = "COMPRESSION_OPTION_2";
    FLAG[FLAG["DATA_DESCRIPTOR"] = 8] = "DATA_DESCRIPTOR";
    FLAG[FLAG["ENHANCED_DEFLATION"] = 16] = "ENHANCED_DEFLATION";
    FLAG[FLAG["COMPRESSED_PATCHED_DATA"] = 32] = "COMPRESSED_PATCHED_DATA";
    FLAG[FLAG["STRONG_ENCRYPTION"] = 64] = "STRONG_ENCRYPTION";
    FLAG[FLAG["UNUSED_1"] = 128] = "UNUSED_1";
    FLAG[FLAG["UNUSED_2"] = 256] = "UNUSED_2";
    FLAG[FLAG["UNUSED_3"] = 512] = "UNUSED_3";
    FLAG[FLAG["UNUSED_4"] = 1024] = "UNUSED_4";
    FLAG[FLAG["LANGUAGE_ENCODING"] = 2048] = "LANGUAGE_ENCODING";
    FLAG[FLAG["RESERVED_1"] = 4096] = "RESERVED_1";
    FLAG[FLAG["MASK_HEADER_VALUES"] = 8192] = "MASK_HEADER_VALUES";
    FLAG[FLAG["RESERVED_2"] = 16384] = "RESERVED_2";
    FLAG[FLAG["RESERVED_3"] = 32768] = "RESERVED_3";
})(FLAG = exports.FLAG || (exports.FLAG = {}));
exports.parseFlag = (flag) => {
    const ret = {};
    ret.Encrypted = !!(flag & FLAG.ENCRYPTED_FILE);
    ret.CompressionOption1 = !!(flag & FLAG.COMPRESSION_OPTION_1);
    ret.CompressionOption2 = !!(flag & FLAG.COMPRESSION_OPTION_2);
    ret.Descriptor = !!(flag & FLAG.DATA_DESCRIPTOR);
    ret.EnhancedDeflation = !!(flag & FLAG.ENHANCED_DEFLATION);
    ret.PatchedData = !!(flag & FLAG.COMPRESSED_PATCHED_DATA);
    ret.StrongEnc = !!(flag & FLAG.STRONG_ENCRYPTION);
    ret.Encoding = !!(flag & FLAG.LANGUAGE_ENCODING);
    ret.MaskHeader = !!(flag & FLAG.MASK_HEADER_VALUES);
    return ret;
};
exports.FlagToInt16 = (flag) => {
    let ret = 0;
    ret |= (flag.Encrypted ? FLAG.ENCRYPTED_FILE : 0);
    ret |= (flag.CompressionOption1 ? FLAG.COMPRESSION_OPTION_1 : 0);
    ret |= (flag.CompressionOption2 ? FLAG.COMPRESSION_OPTION_2 : 0);
    ret |= (flag.Descriptor ? FLAG.DATA_DESCRIPTOR : 0);
    ret |= (flag.EnhancedDeflation ? FLAG.ENHANCED_DEFLATION : 0);
    ret |= (flag.PatchedData ? FLAG.COMPRESSED_PATCHED_DATA : 0);
    ret |= (flag.StrongEnc ? FLAG.STRONG_ENCRYPTION : 0);
    ret |= (flag.Encoding ? FLAG.LANGUAGE_ENCODING : 0);
    ret |= (flag.MaskHeader ? FLAG.MASK_HEADER_VALUES : 0);
    return ret;
};
exports.DayToDate = (day, date = new Date(0)) => {
    const year = (day & 0b1111111000000000) >> 9;
    const month = (day & 0b0000000111100000) >> 5;
    const d = (day & 0b0000000000011111);
    date.setFullYear(year + 1980);
    date.setMonth(month - 1);
    date.setDate(d);
    return date;
};
exports.TimeToDate = (time, date = new Date(0)) => {
    const hour = (time & 0b1111100000000000) >> 11;
    const minute = (time & 0b0000011111100000) >> 5;
    const sec = (time & 0b0000000000011111);
    date.setHours(hour);
    date.setMinutes(minute);
    date.setSeconds(sec * 2);
    return date;
};
exports.DateToDay = (date) => {
    let ret = 0;
    const year = date.getFullYear() - 1980;
    const month = (date.getMonth() + 1);
    const d = date.getDate();
    ret |= year << 9;
    ret |= month << 5;
    ret |= d;
    return ret;
};
exports.DateToTime = (date) => {
    let ret = 0;
    const hour = date.getHours();
    const minute = date.getMinutes();
    const sec = Math.floor(date.getSeconds() / 2);
    ret |= hour << 11;
    ret |= minute << 5;
    ret |= sec;
    return ret;
};
//# sourceMappingURL=util.js.map